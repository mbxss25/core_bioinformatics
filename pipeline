#Script to follow in unix
##download dataset from the readme file.

#First, let’s create a directory to save our fastQC outputs to:

mkdir -p QC_Reports 

##run FastQC on our target sample
#Quality check using FastQC

fastqc ERR5743893_1.fastq ERR5743893_2.fastq --outdir QC_Reports 

#once qc is completed, run 
multiqc . 

#then run follwing, to open multi_qc reports of the quality check we performed.

open multiqc_report.html

#multiqc_report.html will give overview of quality of our sequences,I have uploaded report by the name "multiqc_plots.zip", have a look.


##Mapping
#There are a few different tools that can be used to map sequences to a reference but we’re going to use BWA-MEM.

#create a directory to store the results from BWA-MEM:

mkdir Mapping

#indexing

bwa index MN908947.fasta 

#map the sequences from our target sample to the reference genome

bwa mem MN908947.fasta ERR5743893_1.fastq ERR5743893_2.fastq > Mapping/ERR5743893.sam

#Now go to directort /Mapping, ypu will see "ERR5743893.sam". we’re going to convert the SAM file to a BAM file using samtools.

samtools view -@ 20 -S -b Mapping/ERR5743893.sam > Mapping/ERR5743893.bam

#we want a BAM file of reads and mapping information ordered by where in the reference genome those reads were aligned

samtools sort -@ 32 -o Mapping/ERR5743893.sorted.bam Mapping/ERR5743893.bam

#index the sorted BAM file

samtools index Mapping/ERR5743893.sorted.bam

#visualize your BAM file on Integrative Genomics Viewer (IGV)| refer: https://youtu.be/die924mosh0?si=NUi5QWlImCdx-a5E

##Variant calling using FreeBayes
#First we need to index the reference genome using samtools:

samtools faidx MN908947.fasta

#Now, let’s use FreeBayes to identify the variants in our test sample:

freebayes -f MN908947.fasta Mapping/ERR5743893.sorted.bam  > ERR5743893.vcf

#compress and index the VCF file

bgzip ERR5743893.vcf
tabix ERR5743893.vcf.gz

##Setting up Nextflow

#set up your conda channels:

conda config --add channels defaults
conda config --add channels bioconda
conda config --add channels conda-forge

#create an environment called nextflow and install Nextflow in it

conda create --name nextflow nextflow
conda activate nextflow
nextflow help

#Creating a samplesheet for viralrecon
#create a text file called samples.txt in your working directory. Copy and paste the ENA accessions below into this file:

ERR5556343

SRR13500958

ERR5743893

ERR5181310

ERR5405022

#use a for loop to run fastq-dump on each of the accessions in samples.txt:

for i in $(cat samples.txt);do fastq-dump --split-files $i;done

#compress the fastq files

gzip *.fastq

#create a directory called data and move the fastq files there:

mkdir data
mv *.fastq.gz data

##viralrecon requires a CSV file containing the sample names and location of the fastq files input. The format of the samplesheet we’re going to use should look like this:
#sample,fastq_1,fastq_2
#SAMPLE_1,fastq_1_location,fastq_2_location

#python script that can be used to generate the samplesheet automatically.

wget -L https://raw.githubusercontent.com/nf-core/viralrecon/master/bin/fastq_dir_to_samplesheet.py

#Now run the python script:

python3 fastq_dir_to_samplesheet.py data samplesheet.csv -r1 _1.fastq.gz -r2 _2.fastq.gz

#check file 
cat samplesheet.csv

##Running Viralrecon

#activate nextflow
conda activate nextflow

#let’s run viralrecon

nextflow run nf-core/viralrecon -profile conda \
--max_memory '12.GB' --max_cpus 4 \
--input samplesheet.csv \
--outdir results/viralrecon \
--protocol amplicon \
--genome 'MN908947.3' \
--primer_set artic \
--primer_set_version 3 \
--skip_kraken2 \
--skip_assembly \
--skip_pangolin \
--skip_nextclade \
--skip_asciigenome \
--platform illumina \
-resume

##View results

#nav result directory
cd results/viralrecon
ls

#read multiqc
open Multiqc

#refer this file in branches to see my reports
multiqc_report.html

#Tidying up after Nextflow
#check usage of workspace

du -sh work

#remove if needed

##Vizualization 
#insatall all necessary packages
#couple of code to undrstand data

list.files()
var <- read.csv("variants_long_table.csv")
head(var)
dim(var)
nrow(var)
ncol(var)
str(var)
# Summary statistics of the whole data or specified columns

## For the whole table 

> summary(var)

## For non-numerical data

> summary(var$SAMPLE)

Length     Class      Mode 
153 character character 

## For numerical data

> summary(var$DP)

Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
38     369    1014    2635    2766   41836 

# Check the class of your data

> class(var)

[1] "data.frame"

# Check the class of an object

> class(var$CHROM)

[1] "character"

> typeof(var$CHROM)

[1] "character"

# Preview the data using a spreadsheet-style data viewer in RStudio
> View(var)

#Filtering columns

#check column name
colnames(var)

#select column 1,4 and 4

var[,c(1,4,5)]

# Select columns 1, 4, and 5 with default display

select(var, SAMPLE, REF, ALT)

# Select columns 1, 4, and 5 with selected display
select(var, SAMPLE, REF, ALT) %>% head(3)

# Select all columns except the column “CALLER” with selected display
select(var, -CALLER) %>% head(3)

## Transform the data frame into a tibble

var_tb <- as_tibble(var)
select(var_tb, SAMPLE, REF, ALT) %>% head(3)

#filtering row

#Select rows with selected display using base R code
> var_tb[var_tb$SAMPLE == "SRR13500958",]

# Select rows with selected display using dplyr functions
> filter(var_tb, SAMPLE == "SRR13500958") %>% head(3)

#Filtering columns and rows

# Select sample type (rows) and variables (columns) with selected display

> var_tb %>% filter(SAMPLE == "SRR13500958") %>% select(CHROM, POS, REF, ALT) %>% head(3)

# To select all data related to the sample specified

> var_tb %>% filter(SAMPLE == "SRR13500958") %>% select(CHROM, POS, REF, ALT, DP)

# To select only values for which DP>=500 for the same sample

> var_tb %>% filter(SAMPLE == "SRR13500958" & DP>=500) %>% select(CHROM, POS, REF, ALT, DP)

# To select only values for which DP>=1000 for the same sample

> var_tb %>% filter(SAMPLE == "SRR13500958" & DP>=1000) %>% select(CHROM, POS, REF, ALT, DP)

# Count how many rows are associated with each sample in the data 

> var_tb %>% count(SAMPLE)

# Sorting the counts 

> var_tb %>% count(SAMPLE, sort = TRUE)

# Distribution of genes per sample and counts 

> var_tb %>% count(SAMPLE, GENE, sort = TRUE) %>% head()

# Maximum value of column DP

> max(var_tb$DP)

# Minimum value of column DP

> min(var_tb$DP)

# Mean value of column DP

> mean(var_tb$DP)

##Compute operations in new columns

# Compute a LOG2 transformation on the DP values

> var_tb_log <- var_tb %>% mutate(DP_log2 = log2(DP))

# View the table columns with the DP_log2 new column appended at the end

> head(var_tb_log)

# View a selected content including the new column

> select(var_tb_log, SAMPLE, REF, ALT, DP, DP_log2) %>% head()

##Split_apply_combine approach for data analysis

# Show the maximum value of DP for each sample

> var_tb %>% group_by(SAMPLE) %>% summarize(max(DP))

# Show the minimum value of DP for each sample

var_tb %>% group_by(SAMPLE) %>% summarize(min(DP))

##Data visualization using ggplot2

# Link ggplot2 to a specific data frame
> ggplot(data = var_tb)

# Link ggplot2 to specific variables using aesthetics
> ggplot(data = var_tb, aes(x=SAMPLE, y=DP))

# Points (left-hand plot)
> ggplot(data = var_tb, aes(x=SAMPLE, y=DP)) + geom_point()

# Boxplot (right-hand plot)
> ggplot(data = var_tb, aes(x=SAMPLE, y=DP)) + geom_boxplot()

##Plotting transformation

# Points (left-hand plot)
> ggplot(data = var_tb, aes(x=SAMPLE, y=DP)) + geom_point() + ylim(0,10000)

# Boxplot (right-hand plot)
> ggplot(data = var_tb, aes(x=SAMPLE, y=DP)) + geom_boxplot() + ylim(0,10000)

# Points (left-hand plot)
> ggplot(data = var_tb, aes(x=SAMPLE, y=DP)) + geom_point() + scale_y_continuous(name="dp", limits=c(0, 10000))

# Boxplot (right-hand plot)
> ggplot(data = var_tb, aes(x=SAMPLE, y=DP)) + geom_boxplot() + scale_y_continuous(name="dp", limits=c(0, 10000))

# Points (left-hand plot)
> ggplot(data = var_tb, aes(x=SAMPLE, y=DP)) + geom_point() + scale_y_continuous(trans='log10')

> ggplot(data = var_tb, aes(x=SAMPLE, y=DP)) + geom_point() + scale_y_log10()

# Boxplot (right-hand plot)
> ggplot(data = var_tb, aes(x=SAMPLE, y=DP)) + geom_boxplot() + scale_y_continuous(trans='log10')

> ggplot(data = var_tb, aes(x=SAMPLE, y=DP)) + geom_boxplot() + scale_y_log10()

##Advanced plotting options: colors, shapes, legend

# Colours of shapes
> ggplot(data = var_tb, aes(x=SAMPLE, y=DP, colour = SAMPLE)) + geom_boxplot() + ylim(0,10000)

# Colours for filling options
> ggplot(data = var_tb, aes(x=SAMPLE, y=DP, fill= SAMPLE)) + geom_boxplot() + ylim(0,10000)

# Colours for filling options with manual colors
> ggplot(data = var_tb, aes(x=SAMPLE, y=DP, fill= SAMPLE)) + geom_boxplot() + ylim(0,10000) + scale_fill_manual(values=c("#cb6015", "#e1ad01", "#6d0016", "#808000", "#4e3524"))

# Colours for filling options with preset palettes
> install.packages(“RColorBrewer”)
> library(RColorBrewer)
> ggplot(data = var_tb, aes(x=SAMPLE, y=DP, fill= SAMPLE)) + geom_boxplot() + ylim(0,10000) + scale_fill_brewer(palette="RdYlBu")

##All possible palettes can be displayed using:

> display.brewer.all()

##Change legend position

> ggplot(data = var_tb, aes(x=SAMPLE, y=DP, fill= SAMPLE)) + geom_boxplot() + ylim(0,10000) + scale_fill_brewer(palette="RdYlBu") + theme(legend.position="top")

> ggplot(data = var_tb, aes(x=SAMPLE, y=DP, fill= SAMPLE)) + geom_boxplot() + ylim(0,10000) + scale_fill_brewer(palette="RdYlBu") + theme(legend.position="none")

##Change plot and axis titles

> ggplot(data = var_tb, aes(x=SAMPLE, y=DP, fill= SAMPLE)) + geom_boxplot() + ylim(0,10000) + scale_fill_brewer(palette="RdYlBu") + theme(legend.position="bottom") + labs(title="DP_per_Sample", x="SampleID", y = "DP")

> ggplot(data = var_tb, aes(x=SAMPLE, y=DP, fill= SAMPLE)) + geom_boxplot() + ylim(0,10000) + scale_fill_brewer(palette="RdYlBu") + theme(legend.position="bottom") + ggtitle("DP per Sample") + xlab("Sample") + ylab("DP")

##Change shapes, colors, and sizes

> ggplot(data = var_tb, aes(x=SAMPLE, y=DP)) +  geom_point(shape = 21, fill = "#e4dbc1", color = "#b92e17", size = 6) + ylim(0,10000)

> ggplot(data = var_tb, aes(x=SAMPLE, y=DP)) +  geom_point(shape = 23, color = "#e4dbc1", fill = "#b92e17", size = 5, alpha=0.5) + ylim(0,10000)

##All possible points can be displayed using:

> ggpubr::show_point_shapes()

##Progressing in variants exploration

#Variants data to explore

# View the data 
> View(var_tb)

#Distribution of DP values per chromosome and per sample
ggplot(data = var_tb, aes(x=CHROM, y=DP, fill= SAMPLE)) + geom_boxplot() + ylim(0,10000) + scale_fill_brewer(palette="RdYlBu") + labs(title="DP_per_Chromosome") + facet_grid(. ~ SAMPLE)

# Define a variable with plotting options

> p_DP_CHROM <- ggplot(data = var_tb, aes(x=CHROM, y=DP, fill= SAMPLE)) + ylim(0,10000) + scale_fill_brewer(palette="RdYlBu") + labs(title="DP_per_Chromosome") + theme(legend.position="bottom")

# Test boxplots with faceting 

> p_DP_CHROM + geom_boxplot() + facet_grid(. ~ SAMPLE)

# Combine violin plots and boxplots with faceting

> p_DP_CHROM + geom_violin(trim=FALSE) + facet_grid(. ~ SAMPLE) + geom_boxplot(width=0.1)

##Variants effects per sample

#Plotting the variants effects

# Count number of different effects per sample
> p_EFFECT <- ggplot(data = var_tb, aes(x=EFFECT, fill= SAMPLE)) + scale_fill_brewer(palette="RdBu") + labs(title="Effect_per_Sample") + theme(legend.position="bottom")

> p_EFFECT + geom_bar()

# Flip orientation

> p_EFFECT_flip <- ggplot(data = var_tb, aes(y=EFFECT, fill= SAMPLE)) + scale_fill_brewer(palette="RdBu") + labs(title="Effect_per_Sample") + theme(legend.position="bottom")

> p_EFFECT_flip + geom_bar()

# Count the number of different effects

> var_tb %>% count(EFFECT)

# Count the number of different effects and link them to sample information

> var_tb %>% count(EFFECT, SAMPLE, sort = TRUE)

# Counting the effects per gene

> var_tb %>% count(EFFECT, GENE, sort = TRUE)

# Filtering option 1 to select for effect on stop

> filter(var_tb, EFFECT == "stop_lost" | EFFECT == "stop_gained")

# A tibble: 4 × 16

# Filtering option 2 to select for effect on stop

> filter(var_tb, EFFECT %in% c("stop_lost", "stop_gained"))

# A tibble: 4 × 16

# Filtering on effect and selected columns

> filter(var_tb, EFFECT %in% c("stop_lost", "stop_gained")) %>% select(SAMPLE, CHROM, GENE, EFFECT)

# Define your variable

> p_DP_POS <- ggplot(data = var_tb, aes(x=POS, y=DP, fill= SAMPLE)) + scale_fill_brewer(palette="RdBu") + labs(title="DP_per_Position") + theme(legend.position="bottom")

# Plot

> p_DP_POS + geom_point(shape = 21, size = 5)

# Plot with transparency options

> p_DP_POS + geom_point(shape = 21, size = 5, alpha = 0.7)




